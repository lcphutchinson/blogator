// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: follows.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFollow = `-- name: CreateFollow :one
INSERT INTO feed_follows (feed_id, user_id)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, feed_id, user_id
`

type CreateFollowParams struct {
	FeedID uuid.UUID `json:"feed_id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFollow, arg.FeedID, arg.UserID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeedID,
		&i.UserID,
	)
	return i, err
}

const listUserFollows = `-- name: ListUserFollows :many
SELECT id, created_at, updated_at, feed_id, user_id
FROM feed_follows
WHERE user_id = $1
ORDER BY updated_at DESC
`

func (q *Queries) ListUserFollows(ctx context.Context, userID uuid.UUID) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, listUserFollows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeedID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFollow = `-- name: RemoveFollow :execresult
DELETE FROM feed_follows
WHERE feed_id = $1 AND user_id = $2
`

type RemoveFollowParams struct {
	FeedID uuid.UUID `json:"feed_id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) RemoveFollow(ctx context.Context, arg RemoveFollowParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeFollow, arg.FeedID, arg.UserID)
}
